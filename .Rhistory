sink()
end <- Sys.time()
elapsed_time <- end - start
pp.check(out, 'fit', 'fit.new')
unique(DC1)
unique(DC1)
print(unique(DC1))
#call in required libraries
suppressMessages(library(rjags))
suppressMessages(library(jagsUI))
library(here)
#read in data and initial value files; using "../" moves you up one directory
seg_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","seg_rand_inits.txt"),header=TRUE)
names(seg_rand)<-NULL
WD_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","WD_rand_inits.txt"),header=TRUE)
names(WD_rand)<-NULL
NREKN.new <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","NREKN.new_inits.txt"),header=TRUE)
names(NREKN.new) <- NULL
w <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","w_inits.txt"),header=TRUE)
names(w) <- NULL
w <- as.numeric(w[,1])
eps <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","eps_inits.txt"),header=TRUE)
names(eps) <- NULL
eps <- as.numeric(eps[,1])
comdata <- read.delim(file=here("Shorebird_aquaculture_project","DataForModelFitting","REKN_fitting012818.txt"),header=T)
#put the column names for the count and covariate data into a vector
comdata_names <- names(comdata)
#number of observations
N <- as.numeric(nrow(comdata))
#number of unique segments; use minus 1 b/c the last row is "END"
segment <-nrow(seg_rand) - 1
#number of unique wind directions; use minus 1 b/c the last row is "END"
WD <- nrow(WD_rand) - 1
#initial values for parameters
Beta_DC1 <- c(NA,1)
Beta_DC2 <- c(NA,1)
Beta_DC3 <- c(NA,1)
Beta_DC4 <- c(NA,1)
Beta_DC5 <- c(NA,1)
Beta_DC6 <- c(NA,1)
Beta_DC7 <- c(NA,1)
Beta_DC8 <- c(NA,1)
alpha.lam=1
omega=1
tau.disp=3
#JAGS only accepts initial values put into a list or a function
initsFunction = function() {list(Beta_DC1=Beta_DC1,Beta_DC2=Beta_DC2,Beta_DC3=Beta_DC3,Beta_DC4=Beta_DC4,Beta_DC5=Beta_DC5,Beta_DC6=Beta_DC6,Beta_DC7=Beta_DC7,Beta_DC8=Beta_DC8,
alpha.lam=alpha.lam,omega=omega,tau.disp=tau.disp,eps=eps)}
#package the data to be used in JAGS by providing the dataset names
data <- list('N','REKN','year','Nsegment','NWD','time','AT','windS','TS','nGulls',
'tending','nOM','nOtherP','dog','raptor','plane','activities','day','Bulk','Dune','Phrag',
'Marsh','Creek','Woodland','FT','LT',"RT","DC1","DC2","DC3","DC4",
"DC5","DC6","DC7","DC8")
#z is a temporary list; each list element contains a single data column from comdata
z<-tapply(as.list(comdata), gl(ncol(comdata),1), as.data.frame)
#Set the list element names in z using the unique data names
names(z) <- comdata_names
#this separates each unique data set into a dataframe
for(i in comdata_names) {
assign(i, z[[i]])
}
#tells JAGS which parameters to monitor
params<-c("Beta_DC1","Beta_DC2","Beta_DC3","Beta_DC4","Beta_DC5","Beta_DC6","Beta_DC7","Beta_DC8",
"alpha.lam","fit","fit.new","omega","tau.disp","bpvalue")
start <- Sys.time()
#write out model
writeLines("
model {											#Open overall model bracket
############################################################
#Priors
############################################################
omega ~ dunif(0,1)
alpha.lam~dnorm(0,0.1)
Beta_DC1[1] <- 0
Beta_DC1[2]~dnorm(0,0.1)
Beta_DC2[1] <- 0
Beta_DC2[2]~dnorm(0,0.1)
Beta_DC3[1] <- 0
Beta_DC3[2]~dnorm(0,0.1)
Beta_DC4[1] <- 0
Beta_DC4[2]~dnorm(0,0.1)
Beta_DC5[1] <- 0
Beta_DC5[2]~dnorm(0,0.1)
Beta_DC6[1] <- 0
Beta_DC6[2]~dnorm(0,0.1)
Beta_DC7[1] <- 0
Beta_DC7[2]~dnorm(0,0.1)
Beta_DC8[1] <- 0
Beta_DC8[2]~dnorm(0,0.1)
# i obs random effect
for (i in 1:N) {
eps[i]~dnorm(0,tau.disp)#I(-20,20)  #random observation effect
}
#hyperprior on random observation effects precision
tau.disp ~ dgamma(0.1,0.001)
############################################################
#Likelihood specification
############################################################
for (i in 1:N){											# Open i likelihood bracket; corresponds to obs
#n observations
w[i] ~ dbern(omega)
NREKN[i] ~ dpois(eff.lambda[i])
eff.lambda[i] <- w[i]*lambda[i]
log(lambda[i]) <- alpha.lam + Beta_DC1[DC1[i]] + Beta_DC2[DC2[i]] +
Beta_DC3[DC3[i]] + Beta_DC4[DC4[i]] + Beta_DC5[DC5[i]] +
Beta_DC6[DC6[i]] + Beta_DC7[DC7[i]] + Beta_DC8[DC8[i]] + eps[i]
# Fit assessments
residual[i] <- NREKN[i] - eff.lambda[i]
predicted[i] <- eff.lambda[i]
sq[i] <- pow(residual[i],2)
# Generate replicate datasets
NREKN.new[i] ~ dpois(eff.lambda[i])
sq.new[i] <- pow(NREKN.new[i]-predicted[i],2)
} # close i likelihood bracket
############################################################
#Derived quantities
############################################################
# Add up discrepancy measures
fit <- sum(sq[])
fit.new <- sum(sq.new[])
test <- step(fit.new-fit)
bpvalue <- mean(test)
} #close model
", con = here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt"))
#Identify filepath of model file;
modfile <- here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt")
sink(file=here("Shorebird_aquaculture_project","OutputFiles","REKN","outputDistOnlyModel.txt"))
#create JAGS model object 'out' using the jags function of package jagsUI
out <- jags(data = data,
parameters.to.save = params,
inits = initsFunction,
model.file = modfile,
modules=c('glm','dic'),
n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
#Shorebird-Aquaculture Model written for BUGS modeling language
#code written by Curtis Burkhalter
#call in required libraries
suppressMessages(library('janitor'))  #package required to clean up column names automatically
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#standardize all data by dividing by 2sd
suppressMessages(library('tidyverse'))
suppressMessages(library('lme4'))
#set working directory
setwd("~/GitHub/Shorebird_aquaculture_project")
pathtofiles <- "G:/Shorebird Project/ShorebirdModel2017/"
#read in raw census data file
RawCensus <- read.delim(file=paste(pathtofiles,"Census201617_Updated.txt",sep=""),header=TRUE, stringsAsFactors = FALSE) %>% clean_names()
View(RawCensus)
#need to attach species names to column headings for each set of observations
#REKN columns 14-20
#RUTU columsn 21-27
#SESA columns 28-34
#SAND columns 35-41
#DUNL columns 42-48
RawCensus[1,14:20] <- paste("REKN",RawCensus[1,14:20],sep=" ")
RawCensus[1,21:27] <- paste("RUTU",RawCensus[1,21:27],sep=" ")
RawCensus[1,28:34] <- paste("SESA",RawCensus[1,28:34],sep=" ")
RawCensus[1,35:41] <- paste("SAND",RawCensus[1,35:41],sep=" ")
RawCensus[1,42:48] <- paste("DUNL",RawCensus[1,42:48],sep=" ")
#replace header column with column entries from row 1; these
#should have been the column headers in the file
colnames(RawCensus) <- RawCensus[1,]
#Remove all column entries for row 1
RawCensus <- RawCensus[-1,]
#remove columns corresponding to observations of less frequent species
#columns 50-69; also remove notes columns 77-79
RawCensus <- RawCensus[,-(c(50:69,77:79))]
#change column names to format that I like
names(RawCensus) <- gsub("Shoreline.*","shore_hab",names(RawCensus))
names(RawCensus) <- gsub("Date.*","date",names(RawCensus))
names(RawCensus) <- gsub("Time.*","time",names(RawCensus))
names(RawCensus) <- gsub("Tide.*","tide",names(RawCensus))
names(RawCensus) <- gsub("Wind Direction.*","windD",names(RawCensus))
names(RawCensus) <- gsub("Wind Speed.*","windS",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Location","FEL",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to RACKS","FEDR",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to TENDING","FEDT",names(RawCensus))
names(RawCensus) <- gsub(".*Window","TW",names(RawCensus))
names(RawCensus) <- gsub("Total # Shorebirds.*","TS",names(RawCensus))
names(RawCensus) <- gsub("Air Temp.*","AT",names(RawCensus))
names(RawCensus) <- gsub("Total # in segment","TIS",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Location","FCL",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to RACKS","FCDR",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to TENDING","FCDT",names(RawCensus))
names(RawCensus) <- gsub("Tending?.*","tending",names(RawCensus))
names(RawCensus) <- gsub("#oystermen.*","nOM",names(RawCensus))
names(RawCensus) <- gsub("#non-oyster.*","nOtherP",names(RawCensus))
names(RawCensus) <- gsub("#dog.*","dog",names(RawCensus))
names(RawCensus) <- gsub("# rapt.*","raptor",names(RawCensus))
names(RawCensus) <- gsub("#low-fly.*","plane",names(RawCensus))
names(RawCensus) <- gsub("#Activ.*","activities",names(RawCensus))
names(RawCensus) <- gsub("Segment #.*","segment",names(RawCensus))
names(RawCensus) <- gsub("#Gulls.*","nGulls",names(RawCensus))
#remove records that contain only a blank space or other character entries
#for total shorebirds|REKN TIS|RUTU TIS|SESA TIS|SAND TIS|DUNL TIS
#there is no other useful data in these records, also any place where there is
#the character entry "N/A" or "2=4"
RawCensus <- RawCensus[!(RawCensus$TS == ""|RawCensus$TS == "N/A"|RawCensus$TS == "2=4"),]
RawCensus <- RawCensus[!(RawCensus$`SESA TIS` == "20/10"|RawCensus$`SESA TIS` == " 4/4"|RawCensus$`SESA TIS` == ""),]
RawCensus <- RawCensus[!(RawCensus$`RUTU TIS` == ""|RawCensus$`RUTU TIS` == "~"),]
#need to convert all of the bird counts to numeric values
RawCensus$TS <- as.numeric(RawCensus$TS)
RawCensus$`REKN TIS` <- as.numeric(RawCensus$`REKN TIS`)
RawCensus$`SESA TIS` <- as.numeric(RawCensus$`SESA TIS`)
RawCensus$`RUTU TIS` <- as.numeric(RawCensus$`RUTU TIS`)
RawCensus$`SAND TIS` <- as.numeric(RawCensus$`SAND TIS`)
RawCensus$`DUNL TIS` <- as.numeric(RawCensus$`DUNL TIS`)
#for some reason some of the REKN,DUNL and RUTU counts include negative numbers
RawCensus <- RawCensus[!(RawCensus$`REKN TIS` < 0|RawCensus$`RUTU TIS` < 0|RawCensus$`DUNL TIS` < 0), ]
#in one entry of 'raptor' column the species was identified
#this drops the species id
RawCensus$raptor <- gsub("\\ BAEA","",RawCensus$raptor)
#in the plane column there are entries with letters
#remove all letters
RawCensus$plane <- gsub("1.*","1",RawCensus$plane)
#convert certain character vectors to factors
RawCensus$segment <- as.factor(RawCensus$segment)
RawCensus$shore_hab <- as.factor(RawCensus$shore_hab)
RawCensus$tide <- as.factor(RawCensus$tide)
RawCensus$date <- as.factor(RawCensus$date)
RawCensus$windD <- as.factor(RawCensus$windD)
#change time so that only numeric
RawCensus$time <- sub(":","",RawCensus$time)
#drop all flock center location columns
RawCensus <- RawCensus[, -grep("FCL.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDR.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDT.*", colnames(RawCensus))]
#subset records to only include those during the tending window
#tending window times correspond to "TW" = 1
OnlyTending<- RawCensus[!(RawCensus$TW==0|is.na(RawCensus$TW)),]
#remove tending window column now that data is subset
OnlyTending$TW <- NULL
#create new date format for date and remove old one
OnlyTending$date <- as.POSIXct(OnlyTending$date, format = "%m/%d/%Y")
#convert the date to a numeric day from 1-365
OnlyTending$day <- strptime(OnlyTending$date, format = "%Y-%m-%d",tz = "")$yday+1
#create year column
OnlyTending$year <- substr(OnlyTending$date, 1,4)
OnlyTending$date <- NULL
#write function that converts data structures from factors to a numeric sequence
as.numeric.factor <- function(x) {seq_along(levels(x))[x]}
#convert segment ids to simple integer value ids
OnlyTending$Nsegment <- as.numeric.factor(OnlyTending$segment)
##convert shore_hab into a numeric id
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
OnlyTending$NSH <- as.numeric.factor(OnlyTending$shore_hab)
#remove all white space from tide column and convert to numeric
#Falling=1;Low=2,Rising=3
OnlyTending$tide <- as.factor(gsub("\\s", "", OnlyTending$tide))
OnlyTending$Ntide <- as.numeric.factor(OnlyTending$tide)
#drop unused levels from factors
OnlyTending$windD<-droplevels(OnlyTending$windD)
##convert wind direction into a numeric id
OnlyTending$NWD <- as.numeric.factor(OnlyTending$windD)
#drop non-numeric categorical variable columns
OnlyTending$segment <- OnlyTending$shore_hab <- OnlyTending$tide <- OnlyTending$date <- OnlyTending$windD <- OnlyTending$SegmentInt <- NULL
OnlyTending$`Julian Day` <- NULL
OnlyTending$`Census #` <- NULL
fit_set <- OnlyTending
#need to code the categorical variables as dummy variables
#to ease their coding in WinBUGS; This requires
#code each level of the categorical variable as 0/1;
#for this dataset it is NSH, Ntide
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
#Falling=1;Low=2,Rising=3;
#in doing the coding this way the regression coefficients
#represent the mean value for each of the respective shoreline types
#and the model intercept represents the common slope across all habitat types
fit_set$Bulk <- ifelse(fit_set$NSH == 2,1,0)
fit_set$Dune <- ifelse(fit_set$NSH == 4,1,0)
fit_set$Phrag <- ifelse(fit_set$NSH == 6,1,0)
fit_set$Marsh <- ifelse(fit_set$NSH == 5,1,0)
fit_set$Creek <- ifelse(fit_set$NSH == 3,1,0)
fit_set$Woodland <- ifelse(fit_set$NSH == 7,1,0)
fit_set$FT <- ifelse(fit_set$Ntide == 1, 1,0)
fit_set$LT <- ifelse(fit_set$Ntide == 2, 1,0)
fit_set$RT <- ifelse(fit_set$Ntide == 3, 1,0)
#need to standardize the data before using it in modeling
#but before make sure all the covariate data is numeric
#and not character; see Gelman 2008 for reasoning
#behind scaling regression coefficients for numeric variables
#that are not binary
str(fit_set)
fit_set$time <- as.numeric(fit_set$time)
fit_set$TS <- as.integer(fit_set$TS)
fit_set$nOM <- as.integer(fit_set$nOM)
fit_set$raptor <- as.integer(fit_set$raptor)
fit_set$plane <- as.integer(fit_set$plane)
fit_set$activities <- as.integer(fit_set$activities)
fit_set$nGulls <- as.integer(fit_set$nGulls)
fit_set$year <- as.integer(fit_set$year)
fit_set$nOtherP <- as.integer(fit_set$nOtherP)
fit_set$dog <- as.integer(fit_set$dog)
fit_set$tending <- as.integer(fit_set$tending)
fit_set$windS <- as.numeric(fit_set$windS)
fit_set$AT <- as.numeric(fit_set$AT)
#drop all FEL and FEDT columns from fit_set
fit_set <- fit_set[, -grep("FEL.*", colnames(fit_set))]
fit_set <- fit_set[, -grep("FEDT.*", colnames(fit_set))]
#create species specific datasets from fit_set
REKN <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
RUTU <- fit_set[, -grep("REKN.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
SESA <- fit_set[, -grep("RUTU.*|REKN.*|SAND.*|DUNL.*", colnames(fit_set))]
SAND <- fit_set[, -grep("RUTU.*|SESA.*|REKN.*|DUNL.*", colnames(fit_set))]
DUNL <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|REKN.*", colnames(fit_set))]
#use dummy variable coding for each species to create a series of distance
#classes; "~" = DC1; "+" = DC2; "0" = DC3, "1" = DC4;
#"2" = DC5; "3" = DC6; "4" = DC7, "5" = DC8;
REKN$`REKN FEDR` <- ifelse(REKN$`REKN FEDR`=="O","0",REKN$`REKN FEDR`)
names(REKN$`REKN FEDR`) <- "FEDR"
names(RUTU$`RUTU FEDR`) <- "FEDR"
names(SESA$`SESA FEDR`) <- "FEDR"
names(SAND$`SAND FEDR`) <- "FEDR"
names(DUNL$`DUNL FEDR`) <- "FEDR"
colnames(REKN$`REKN FEDR`) <- "FEDR"
colnames(RUTU$`RUTU FEDR`) <- "FEDR"
colnames(SESA$`SESA FEDR`) <- "FEDR"
colnames(SAND$`SAND FEDR`) <- "FEDR"
colnames(DUNL$`DUNL FEDR`) <- "FEDR"
names(REKN$`REKN FEDR`) <- "FEDR"
head(REKN)
#Shorebird-Aquaculture Model written for BUGS modeling language
#code written by Curtis Burkhalter
#call in required libraries
suppressMessages(library('janitor'))  #package required to clean up column names automatically
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#standardize all data by dividing by 2sd
suppressMessages(library('tidyverse'))
suppressMessages(library('lme4'))
#set working directory
setwd("~/GitHub/Shorebird_aquaculture_project")
pathtofiles <- "G:/Shorebird Project/ShorebirdModel2017/"
#read in raw census data file
RawCensus <- read.delim(file=paste(pathtofiles,"Census201617_Updated.txt",sep=""),header=TRUE, stringsAsFactors = FALSE) %>% clean_names()
View(RawCensus)
#need to attach species names to column headings for each set of observations
#REKN columns 14-20
#RUTU columsn 21-27
#SESA columns 28-34
#SAND columns 35-41
#DUNL columns 42-48
RawCensus[1,14:20] <- paste("REKN",RawCensus[1,14:20],sep=" ")
RawCensus[1,21:27] <- paste("RUTU",RawCensus[1,21:27],sep=" ")
RawCensus[1,28:34] <- paste("SESA",RawCensus[1,28:34],sep=" ")
RawCensus[1,35:41] <- paste("SAND",RawCensus[1,35:41],sep=" ")
RawCensus[1,42:48] <- paste("DUNL",RawCensus[1,42:48],sep=" ")
#replace header column with column entries from row 1; these
#should have been the column headers in the file
colnames(RawCensus) <- RawCensus[1,]
#Remove all column entries for row 1
RawCensus <- RawCensus[-1,]
#remove columns corresponding to observations of less frequent species
#columns 50-69; also remove notes columns 77-79
RawCensus <- RawCensus[,-(c(50:69,77:79))]
#change column names to format that I like
names(RawCensus) <- gsub("Shoreline.*","shore_hab",names(RawCensus))
names(RawCensus) <- gsub("Date.*","date",names(RawCensus))
names(RawCensus) <- gsub("Time.*","time",names(RawCensus))
names(RawCensus) <- gsub("Tide.*","tide",names(RawCensus))
names(RawCensus) <- gsub("Wind Direction.*","windD",names(RawCensus))
names(RawCensus) <- gsub("Wind Speed.*","windS",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Location","FEL",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to RACKS","FEDR",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to TENDING","FEDT",names(RawCensus))
names(RawCensus) <- gsub(".*Window","TW",names(RawCensus))
names(RawCensus) <- gsub("Total # Shorebirds.*","TS",names(RawCensus))
names(RawCensus) <- gsub("Air Temp.*","AT",names(RawCensus))
names(RawCensus) <- gsub("Total # in segment","TIS",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Location","FCL",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to RACKS","FCDR",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to TENDING","FCDT",names(RawCensus))
names(RawCensus) <- gsub("Tending?.*","tending",names(RawCensus))
names(RawCensus) <- gsub("#oystermen.*","nOM",names(RawCensus))
names(RawCensus) <- gsub("#non-oyster.*","nOtherP",names(RawCensus))
names(RawCensus) <- gsub("#dog.*","dog",names(RawCensus))
names(RawCensus) <- gsub("# rapt.*","raptor",names(RawCensus))
names(RawCensus) <- gsub("#low-fly.*","plane",names(RawCensus))
names(RawCensus) <- gsub("#Activ.*","activities",names(RawCensus))
names(RawCensus) <- gsub("Segment #.*","segment",names(RawCensus))
names(RawCensus) <- gsub("#Gulls.*","nGulls",names(RawCensus))
#remove records that contain only a blank space or other character entries
#for total shorebirds|REKN TIS|RUTU TIS|SESA TIS|SAND TIS|DUNL TIS
#there is no other useful data in these records, also any place where there is
#the character entry "N/A" or "2=4"
RawCensus <- RawCensus[!(RawCensus$TS == ""|RawCensus$TS == "N/A"|RawCensus$TS == "2=4"),]
RawCensus <- RawCensus[!(RawCensus$`SESA TIS` == "20/10"|RawCensus$`SESA TIS` == " 4/4"|RawCensus$`SESA TIS` == ""),]
RawCensus <- RawCensus[!(RawCensus$`RUTU TIS` == ""|RawCensus$`RUTU TIS` == "~"),]
#need to convert all of the bird counts to numeric values
RawCensus$TS <- as.numeric(RawCensus$TS)
RawCensus$`REKN TIS` <- as.numeric(RawCensus$`REKN TIS`)
RawCensus$`SESA TIS` <- as.numeric(RawCensus$`SESA TIS`)
RawCensus$`RUTU TIS` <- as.numeric(RawCensus$`RUTU TIS`)
RawCensus$`SAND TIS` <- as.numeric(RawCensus$`SAND TIS`)
RawCensus$`DUNL TIS` <- as.numeric(RawCensus$`DUNL TIS`)
#for some reason some of the REKN,DUNL and RUTU counts include negative numbers
RawCensus <- RawCensus[!(RawCensus$`REKN TIS` < 0|RawCensus$`RUTU TIS` < 0|RawCensus$`DUNL TIS` < 0), ]
#in one entry of 'raptor' column the species was identified
#this drops the species id
RawCensus$raptor <- gsub("\\ BAEA","",RawCensus$raptor)
#in the plane column there are entries with letters
#remove all letters
RawCensus$plane <- gsub("1.*","1",RawCensus$plane)
#convert certain character vectors to factors
RawCensus$segment <- as.factor(RawCensus$segment)
RawCensus$shore_hab <- as.factor(RawCensus$shore_hab)
RawCensus$tide <- as.factor(RawCensus$tide)
RawCensus$date <- as.factor(RawCensus$date)
RawCensus$windD <- as.factor(RawCensus$windD)
#change time so that only numeric
RawCensus$time <- sub(":","",RawCensus$time)
#drop all flock center location columns
RawCensus <- RawCensus[, -grep("FCL.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDR.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDT.*", colnames(RawCensus))]
#subset records to only include those during the tending window
#tending window times correspond to "TW" = 1
OnlyTending<- RawCensus[!(RawCensus$TW==0|is.na(RawCensus$TW)),]
#remove tending window column now that data is subset
OnlyTending$TW <- NULL
#create new date format for date and remove old one
OnlyTending$date <- as.POSIXct(OnlyTending$date, format = "%m/%d/%Y")
#convert the date to a numeric day from 1-365
OnlyTending$day <- strptime(OnlyTending$date, format = "%Y-%m-%d",tz = "")$yday+1
#create year column
OnlyTending$year <- substr(OnlyTending$date, 1,4)
OnlyTending$date <- NULL
#write function that converts data structures from factors to a numeric sequence
as.numeric.factor <- function(x) {seq_along(levels(x))[x]}
#convert segment ids to simple integer value ids
OnlyTending$Nsegment <- as.numeric.factor(OnlyTending$segment)
##convert shore_hab into a numeric id
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
OnlyTending$NSH <- as.numeric.factor(OnlyTending$shore_hab)
#remove all white space from tide column and convert to numeric
#Falling=1;Low=2,Rising=3
OnlyTending$tide <- as.factor(gsub("\\s", "", OnlyTending$tide))
OnlyTending$Ntide <- as.numeric.factor(OnlyTending$tide)
#drop unused levels from factors
OnlyTending$windD<-droplevels(OnlyTending$windD)
##convert wind direction into a numeric id
OnlyTending$NWD <- as.numeric.factor(OnlyTending$windD)
#drop non-numeric categorical variable columns
OnlyTending$segment <- OnlyTending$shore_hab <- OnlyTending$tide <- OnlyTending$date <- OnlyTending$windD <- OnlyTending$SegmentInt <- NULL
OnlyTending$`Julian Day` <- NULL
OnlyTending$`Census #` <- NULL
fit_set <- OnlyTending
#need to code the categorical variables as dummy variables
#to ease their coding in WinBUGS; This requires
#code each level of the categorical variable as 0/1;
#for this dataset it is NSH, Ntide
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
#Falling=1;Low=2,Rising=3;
#in doing the coding this way the regression coefficients
#represent the mean value for each of the respective shoreline types
#and the model intercept represents the common slope across all habitat types
fit_set$Bulk <- ifelse(fit_set$NSH == 2,1,0)
fit_set$Dune <- ifelse(fit_set$NSH == 4,1,0)
fit_set$Phrag <- ifelse(fit_set$NSH == 6,1,0)
fit_set$Marsh <- ifelse(fit_set$NSH == 5,1,0)
fit_set$Creek <- ifelse(fit_set$NSH == 3,1,0)
fit_set$Woodland <- ifelse(fit_set$NSH == 7,1,0)
fit_set$FT <- ifelse(fit_set$Ntide == 1, 1,0)
fit_set$LT <- ifelse(fit_set$Ntide == 2, 1,0)
fit_set$RT <- ifelse(fit_set$Ntide == 3, 1,0)
#need to standardize the data before using it in modeling
#but before make sure all the covariate data is numeric
#and not character; see Gelman 2008 for reasoning
#behind scaling regression coefficients for numeric variables
#that are not binary
str(fit_set)
fit_set$time <- as.numeric(fit_set$time)
fit_set$TS <- as.integer(fit_set$TS)
fit_set$nOM <- as.integer(fit_set$nOM)
fit_set$raptor <- as.integer(fit_set$raptor)
fit_set$plane <- as.integer(fit_set$plane)
fit_set$activities <- as.integer(fit_set$activities)
fit_set$nGulls <- as.integer(fit_set$nGulls)
fit_set$year <- as.integer(fit_set$year)
fit_set$nOtherP <- as.integer(fit_set$nOtherP)
fit_set$dog <- as.integer(fit_set$dog)
fit_set$tending <- as.integer(fit_set$tending)
fit_set$windS <- as.numeric(fit_set$windS)
fit_set$AT <- as.numeric(fit_set$AT)
#drop all FEL and FEDT columns from fit_set
fit_set <- fit_set[, -grep("FEL.*", colnames(fit_set))]
fit_set <- fit_set[, -grep("FEDT.*", colnames(fit_set))]
#create species specific datasets from fit_set
REKN <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
RUTU <- fit_set[, -grep("REKN.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
SESA <- fit_set[, -grep("RUTU.*|REKN.*|SAND.*|DUNL.*", colnames(fit_set))]
SAND <- fit_set[, -grep("RUTU.*|SESA.*|REKN.*|DUNL.*", colnames(fit_set))]
DUNL <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|REKN.*", colnames(fit_set))]
#use dummy variable coding for each species to create a series of distance
#classes; "~" = DC1; "+" = DC2; "0" = DC3, "1" = DC4;
#"2" = DC5; "3" = DC6; "4" = DC7, "5" = DC8;
REKN$`REKN FEDR` <- ifelse(REKN$`REKN FEDR`=="O","0",REKN$`REKN FEDR`)
names(REKN$`REKN FEDR`) <- "FEDR"
names(RUTU$`RUTU FEDR`) <- "FEDR"
names(SESA$`SESA FEDR`) <- "FEDR"
names(SAND$`SAND FEDR`) <- "FEDR"
names(DUNL$`DUNL FEDR`) <- "FEDR"
View(REKN)
