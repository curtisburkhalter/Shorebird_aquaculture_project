n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
unique(REKN$FEDR)
unique(comdata$FEDR)
#call in required libraries
suppressMessages(library(rjags))
suppressMessages(library(jagsUI))
suppressMessages(library(here))
#read in data and initial value files; using "../" moves you up one directory
seg_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","seg_rand_inits.txt"),header=TRUE)
names(seg_rand)<-NULL
WD_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","WD_rand_inits.txt"),header=TRUE)
names(WD_rand)<-NULL
NREKN.new <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","NREKN.new_inits.txt"),header=TRUE)
names(NREKN.new) <- NULL
NREKN.new <- as.numeric(NREKN.new[,1])
NREKN.new <- NREKN.new[1:6935]
w <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","w_inits.txt"),header=TRUE)
names(w) <- NULL
w <- as.numeric(w[,1])
eps <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","eps_inits.txt"),header=TRUE)
names(eps) <- NULL
eps <- as.numeric(eps[,1])
comdata <- read.delim(file=here("Shorebird_aquaculture_project","DataForModelFitting","REKN_fitting012818.txt"),header=T)
#put the column names for the count and covariate data into a vector
comdata_names <- names(comdata)
comdata$FEDR <- ifelse(comdata$FEDR == 5, 4, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 6, 5, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 7, 6, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 8, 7, comdata$FEDR)
#number of observations
N <- as.numeric(nrow(comdata))
#number of unique segments; use minus 1 b/c the last row is "END"
segment <-nrow(seg_rand) - 1
#number of unique wind directions; use minus 1 b/c the last row is "END"
WD <- nrow(WD_rand) - 1
#initial values for parameters
Beta_FEDR=c(NA,1,1,1,1,1,1)
alpha.lam=1
omega=1
tau.disp=3
#comdata$FEDR <- factor(comdata$FEDR)
#comdata$FEDR <- droplevels(comdata$FEDR)
#comdata$FEDR <- as.integer(comdata$FEDR)
#JAGS only accepts initial values put into a list or a function
initsFunction = function() {list(Beta_FEDR=Beta_FEDR,alpha.lam=alpha.lam,omega=omega,tau.disp=tau.disp,eps=eps)}
#package the data to be used in JAGS by providing the dataset names
data <- list('N','REKN','year','FEDR','Nsegment','NWD','time','AT','windS','TS','nGulls',
'tending','nOM','nOtherP','dog','raptor','plane','activities','day','Bulk','Dune','Phrag',
'Marsh','Creek','Woodland','FT','LT','RT','DC1','DC2','DC3','DC4',
'DC5','DC6','DC7','DC8')
#z is a temporary list; each list element contains a single data column from comdata
z<-tapply(as.list(comdata), gl(ncol(comdata),1), as.data.frame)
#Set the list element names in z using the unique data names
names(z) <- comdata_names
#this separates each unique data set into a dataframe
for(i in comdata_names) {
assign(i, z[[i]])
}
#tells JAGS which parameters to monitor
params<-c("Beta_FEDR",
"alpha.lam","fit","fit.new","omega","tau.disp","bpvalue")
start <- Sys.time()
#write out model
writeLines("
model {											#Open overall model bracket
############################################################
#Priors
############################################################
omega ~ dunif(0,1)
alpha.lam~dnorm(0,0.1)
Beta_FEDR[1] <- 0
Beta_FEDR[2]~dnorm(0,0.1)
Beta_FEDR[3]~dnorm(0,0.1)
Beta_FEDR[4]~dnorm(0,0.1)
Beta_FEDR[5]~dnorm(0,0.1)
Beta_FEDR[6]~dnorm(0,0.1)
Beta_FEDR[7]~dnorm(0,0.1)
# i obs random effect
for (i in 1:N) {
eps[i]~dnorm(0,tau.disp)#I(-20,20)  #random observation effect
}
#hyperprior on random observation effects precision
tau.disp ~ dgamma(0.1,0.001)
############################################################
#Likelihood specification
############################################################
for (i in 1:N){											# Open i likelihood bracket; corresponds to obs
#n observations
w[i] ~ dbern(omega)
NREKN[i] ~ dpois(eff.lambda[i])
eff.lambda[i] <- w[i]*lambda[i]
log(lambda[i]) <- alpha.lam + Beta_FEDR[FEDR[i]] + eps[i]
# Fit assessments
residual[i] <- NREKN[i] - eff.lambda[i]
predicted[i] <- eff.lambda[i]
sq[i] <- pow(residual[i],2)
# Generate replicate datasets
NREKN.new[i] ~ dpois(eff.lambda[i])
sq.new[i] <- pow(NREKN.new[i]-predicted[i],2)
} # close i likelihood bracket
############################################################
#Derived quantities
############################################################
# Add up discrepancy measures
fit <- sum(sq[])
fit.new <- sum(sq.new[])
test <- step(fit.new-fit)
bpvalue <- mean(test)
} #close model
", con = here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt"))
#Identify filepath of model file;
modfile <- here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt")
sink(file=here("Shorebird_aquaculture_project","OutputFiles","REKN","outputDistOnlyModel.txt"))
#create JAGS model object 'out' using the jags function of package jagsUI
out <- jags(data = data,
parameters.to.save = params,
inits = initsFunction,
model.file = modfile,
modules=c('glm','dic'),
n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
#call in required libraries
suppressMessages(library(rjags))
suppressMessages(library(jagsUI))
suppressMessages(library(here))
#read in data and initial value files; using "../" moves you up one directory
seg_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","seg_rand_inits.txt"),header=TRUE)
names(seg_rand)<-NULL
WD_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","WD_rand_inits.txt"),header=TRUE)
names(WD_rand)<-NULL
NREKN.new <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","NREKN.new_inits.txt"),header=TRUE)
names(NREKN.new) <- NULL
NREKN.new <- as.numeric(NREKN.new[,1])
NREKN.new <- NREKN.new[1:6935]
w <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","w_inits.txt"),header=TRUE)
names(w) <- NULL
w <- as.numeric(w[,1])
eps <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","eps_inits.txt"),header=TRUE)
names(eps) <- NULL
eps <- as.numeric(eps[,1])
comdata <- read.delim(file=here("Shorebird_aquaculture_project","DataForModelFitting","REKN_fitting012818.txt"),header=T)
#put the column names for the count and covariate data into a vector
comdata_names <- names(comdata)
comdata$FEDR <- ifelse(comdata$FEDR == 5, 4, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 6, 5, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 7, 6, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 8, 7, comdata$FEDR)
#number of observations
N <- as.numeric(nrow(comdata))
#number of unique segments; use minus 1 b/c the last row is "END"
segment <-nrow(seg_rand) - 1
#number of unique wind directions; use minus 1 b/c the last row is "END"
WD <- nrow(WD_rand) - 1
#initial values for parameters
Beta_FEDR=c(NA,1,1,1,1,1,1)
alpha.lam=1
omega=1
tau.disp=3
#comdata$FEDR <- factor(comdata$FEDR)
#comdata$FEDR <- droplevels(comdata$FEDR)
#comdata$FEDR <- as.integer(comdata$FEDR)
#JAGS only accepts initial values put into a list or a function
initsFunction = function() {list(Beta_FEDR=Beta_FEDR,alpha.lam=alpha.lam,omega=omega,tau.disp=tau.disp,eps=eps)}
#package the data to be used in JAGS by providing the dataset names
data <- list('N','REKN','year','FEDR','Nsegment','NWD','time','AT','windS','TS','nGulls',
'tending','nOM','nOtherP','dog','raptor','plane','activities','day','Bulk','Dune','Phrag',
'Marsh','Creek','Woodland','FT','LT','RT','DC1','DC2','DC3','DC4',
'DC5','DC6','DC7','DC8')
#z is a temporary list; each list element contains a single data column from comdata
z<-tapply(as.list(comdata), gl(ncol(comdata),1), as.data.frame)
#Set the list element names in z using the unique data names
names(z) <- comdata_names
#this separates each unique data set into a dataframe
for(i in comdata_names) {
assign(i, z[[i]])
}
#tells JAGS which parameters to monitor
params<-c("Beta_FEDR",
"alpha.lam","fit","fit.new","omega","tau.disp","bpvalue")
start <- Sys.time()
#write out model
writeLines("
model {											#Open overall model bracket
############################################################
#Priors
############################################################
omega ~ dunif(0,1)
alpha.lam~dnorm(0,0.1)
Beta_FEDR[1] <- 0
Beta_FEDR[2]~dnorm(0,0.1)
Beta_FEDR[3]~dnorm(0,0.1)
Beta_FEDR[4]~dnorm(0,0.1)
Beta_FEDR[5]~dnorm(0,0.1)
Beta_FEDR[6]~dnorm(0,0.1)
Beta_FEDR[7]~dnorm(0,0.1)
# i obs random effect
for (i in 1:N) {
eps[i]~dnorm(0,tau.disp)#I(-20,20)  #random observation effect
}
#hyperprior on random observation effects precision
tau.disp ~ dgamma(0.1,0.001)
############################################################
#Likelihood specification
############################################################
for (i in 1:N){											# Open i likelihood bracket; corresponds to obs
#n observations
w[i] ~ dbern(omega)
NREKN[i] ~ dpois(eff.lambda[i])
eff.lambda[i] <- w[i]*lambda[i]
log(lambda[i]) <- alpha.lam + Beta_FEDR[FEDR[i]] + eps[i]
# Fit assessments
residual[i] <- NREKN[i] - eff.lambda[i]
predicted[i] <- eff.lambda[i]
sq[i] <- pow(residual[i],2)
# Generate replicate datasets
NREKN.new[i] ~ dpois(eff.lambda[i])
sq.new[i] <- pow(NREKN.new[i]-predicted[i],2)
} # close i likelihood bracket
############################################################
#Derived quantities
############################################################
# Add up discrepancy measures
fit <- sum(sq[])
fit.new <- sum(sq.new[])
test <- step(fit.new-fit)
bpvalue <- mean(test)
} #close model
", con = here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt"))
#Identify filepath of model file;
modfile <- here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt")
sink(file=here("Shorebird_aquaculture_project","OutputFiles","REKN","outputDistOnlyModel.txt"))
#create JAGS model object 'out' using the jags function of package jagsUI
out <- jags(data = data,
parameters.to.save = params,
inits = initsFunction,
model.file = modfile,
modules=c('glm','dic'),
n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
start <- Sys.time()
#write out model
writeLines("
model {											#Open overall model bracket
############################################################
#Priors
############################################################
omega ~ dunif(0,1)
alpha.lam~dnorm(0,0.1)
beta_DC1[1] <- 0
beta_DC1[2]~dnorm(0,0.1)
beta_DC2[1] <- 0
beta_DC2[2]~dnorm(0,0.1)
beta_DC3[1] <- 0
beta_DC3[2]~dnorm(0,0.1)
beta_DC4[1] <- 0
beta_DC4[2]~dnorm(0,0.1)
beta_DC5[1] <- 0
beta_DC5[2]~dnorm(0,0.1)
beta_DC6[1] <- 0
beta_DC6[2]~dnorm(0,0.1)
beta_DC7[1] <- 0
beta_DC7[2]~dnorm(0,0.1)
beta_DC8[1] <- 0
beta_DC8[2]~dnorm(0,0.1)
#Beta_FEDR[1] <- 0
#Beta_FEDR[2]~dnorm(0,0.1)
#Beta_FEDR[3]~dnorm(0,0.1)
#Beta_FEDR[4]~dnorm(0,0.1)
#Beta_FEDR[5]~dnorm(0,0.1)
#Beta_FEDR[6]~dnorm(0,0.1)
#Beta_FEDR[7]~dnorm(0,0.1)
# i obs random effect
for (i in 1:N) {
eps[i]~dnorm(0,tau.disp)#I(-20,20)  #random observation effect
}
#hyperprior on random observation effects precision
tau.disp ~ dgamma(0.1,0.001)
############################################################
#Likelihood specification
############################################################
for (i in 1:N){											# Open i likelihood bracket; corresponds to obs
#n observations
w[i] ~ dbern(omega)
NREKN[i] ~ dpois(eff.lambda[i])
eff.lambda[i] <- w[i]*lambda[i]
log(lambda[i]) <- alpha.lam + beta_DC1*DC1[i] +
beta_DC2*DC2[i] +beta_DC3*DC3[i] +beta_DC4*DC4[i] +beta_DC5*DC5[i] +
beta_DC6*DC6[i] +beta_DC7*DC7[i] +beta_DC8*DC8[i] +eps[i]
# Fit assessments
residual[i] <- NREKN[i] - eff.lambda[i]
predicted[i] <- eff.lambda[i]
sq[i] <- pow(residual[i],2)
# Generate replicate datasets
NREKN.new[i] ~ dpois(eff.lambda[i])
sq.new[i] <- pow(NREKN.new[i]-predicted[i],2)
} # close i likelihood bracket
############################################################
#Derived quantities
############################################################
# Add up discrepancy measures
fit <- sum(sq[])
fit.new <- sum(sq.new[])
test <- step(fit.new-fit)
bpvalue <- mean(test)
} #close model
", con = here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt"))
#Identify filepath of model file;
modfile <- here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt")
sink(file=here("Shorebird_aquaculture_project","OutputFiles","REKN","outputDistOnlyModel.txt"))
#create JAGS model object 'out' using the jags function of package jagsUI
out <- jags(data = data,
parameters.to.save = params,
inits = initsFunction,
model.file = modfile,
modules=c('glm','dic'),
n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
#call in required libraries
suppressMessages(library(rjags))
suppressMessages(library(jagsUI))
suppressMessages(library(here))
#read in data and initial value files; using "../" moves you up one directory
seg_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","seg_rand_inits.txt"),header=TRUE)
names(seg_rand)<-NULL
WD_rand <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","WD_rand_inits.txt"),header=TRUE)
names(WD_rand)<-NULL
NREKN.new <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","NREKN.new_inits.txt"),header=TRUE)
names(NREKN.new) <- NULL
NREKN.new <- as.numeric(NREKN.new[,1])
NREKN.new <- NREKN.new[1:6935]
w <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","w_inits.txt"),header=TRUE)
names(w) <- NULL
w <- as.numeric(w[,1])
eps <- read.delim(file=here("Shorebird_aquaculture_project","InitialValueFiles","eps_inits.txt"),header=TRUE)
names(eps) <- NULL
eps <- as.numeric(eps[,1])
comdata <- read.delim(file=here("Shorebird_aquaculture_project","DataForModelFitting","REKN_fitting012818.txt"),header=T)
#put the column names for the count and covariate data into a vector
comdata_names <- names(comdata)
comdata$FEDR <- ifelse(comdata$FEDR == 5, 4, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 6, 5, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 7, 6, comdata$FEDR)
comdata$FEDR <- ifelse(comdata$FEDR == 8, 7, comdata$FEDR)
#number of observations
N <- as.numeric(nrow(comdata))
#number of unique segments; use minus 1 b/c the last row is "END"
segment <-nrow(seg_rand) - 1
#number of unique wind directions; use minus 1 b/c the last row is "END"
WD <- nrow(WD_rand) - 1
#initial values for parameters
#Beta_FEDR=c(NA,1,1,1,1,1,1)
beta_DC1=c(NA,1)
beta_DC2=c(NA,1)
beta_DC3=c(NA,1)
beta_DC4=c(NA,1)
beta_DC5=c(NA,1)
beta_DC6=c(NA,1)
beta_DC7=c(NA,1)
beta_DC8=c(NA,1)
alpha.lam=1
omega=1
tau.disp=3
#comdata$FEDR <- factor(comdata$FEDR)
#comdata$FEDR <- droplevels(comdata$FEDR)
#comdata$FEDR <- as.integer(comdata$FEDR)
#JAGS only accepts initial values put into a list or a function
initsFunction = function() {list(beta_DC1=beta_DC1,
beta_DC2=beta_DC2,beta_DC3=beta_DC3,
beta_DC4=beta_DC4,beta_DC5=beta_DC5,
beta_DC7=beta_DC7,beta_DC6=beta_DC6,
beta_DC8=beta_DC8,
alpha.lam=alpha.lam,omega=omega,tau.disp=tau.disp,eps=eps)}
#package the data to be used in JAGS by providing the dataset names
data <- list('N','REKN','year','FEDR','Nsegment','NWD','time','AT','windS','TS','nGulls',
'tending','nOM','nOtherP','dog','raptor','plane','activities','day','Bulk','Dune','Phrag',
'Marsh','Creek','Woodland','FT','LT','RT','DC1','DC2','DC3','DC4',
'DC5','DC6','DC7','DC8')
#z is a temporary list; each list element contains a single data column from comdata
z<-tapply(as.list(comdata), gl(ncol(comdata),1), as.data.frame)
#Set the list element names in z using the unique data names
names(z) <- comdata_names
#this separates each unique data set into a dataframe
for(i in comdata_names) {
assign(i, z[[i]])
}
#tells JAGS which parameters to monitor
params<-c("beta_DC1","beta_DC2","beta_DC3","beta_DC4","beta_DC5","beta_DC6","beta_DC7","beta_DC8",
"alpha.lam","fit","fit.new","omega","tau.disp","bpvalue")
start <- Sys.time()
#write out model
writeLines("
model {											#Open overall model bracket
############################################################
#Priors
############################################################
omega ~ dunif(0,1)
alpha.lam~dnorm(0,0.1)
beta_DC1[1] <- 0
beta_DC1[2]~dnorm(0,0.1)
beta_DC2[1] <- 0
beta_DC2[2]~dnorm(0,0.1)
beta_DC3[1] <- 0
beta_DC3[2]~dnorm(0,0.1)
beta_DC4[1] <- 0
beta_DC4[2]~dnorm(0,0.1)
beta_DC5[1] <- 0
beta_DC5[2]~dnorm(0,0.1)
beta_DC6[1] <- 0
beta_DC6[2]~dnorm(0,0.1)
beta_DC7[1] <- 0
beta_DC7[2]~dnorm(0,0.1)
beta_DC8[1] <- 0
beta_DC8[2]~dnorm(0,0.1)
#Beta_FEDR[1] <- 0
#Beta_FEDR[2]~dnorm(0,0.1)
#Beta_FEDR[3]~dnorm(0,0.1)
#Beta_FEDR[4]~dnorm(0,0.1)
#Beta_FEDR[5]~dnorm(0,0.1)
#Beta_FEDR[6]~dnorm(0,0.1)
#Beta_FEDR[7]~dnorm(0,0.1)
# i obs random effect
for (i in 1:N) {
eps[i]~dnorm(0,tau.disp)#I(-20,20)  #random observation effect
}
#hyperprior on random observation effects precision
tau.disp ~ dgamma(0.1,0.001)
############################################################
#Likelihood specification
############################################################
for (i in 1:N){											# Open i likelihood bracket; corresponds to obs
#n observations
w[i] ~ dbern(omega)
NREKN[i] ~ dpois(eff.lambda[i])
eff.lambda[i] <- w[i]*lambda[i]
log(lambda[i]) <- alpha.lam + beta_DC1*DC1[i] +
beta_DC2*DC2[i] +beta_DC3*DC3[i] +beta_DC4*DC4[i] +beta_DC5*DC5[i] +
beta_DC6*DC6[i] +beta_DC7*DC7[i] +beta_DC8*DC8[i] +eps[i]
# Fit assessments
residual[i] <- NREKN[i] - eff.lambda[i]
predicted[i] <- eff.lambda[i]
sq[i] <- pow(residual[i],2)
# Generate replicate datasets
NREKN.new[i] ~ dpois(eff.lambda[i])
sq.new[i] <- pow(NREKN.new[i]-predicted[i],2)
} # close i likelihood bracket
############################################################
#Derived quantities
############################################################
# Add up discrepancy measures
fit <- sum(sq[])
fit.new <- sum(sq.new[])
test <- step(fit.new-fit)
bpvalue <- mean(test)
} #close model
", con = here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt"))
#Identify filepath of model file;
modfile <- here("Shorebird_aquaculture_project","REKN_Models", "ZIP_DistOnlyModel.txt")
sink(file=here("Shorebird_aquaculture_project","OutputFiles","REKN","outputDistOnlyModel.txt"))
#create JAGS model object 'out' using the jags function of package jagsUI
out <- jags(data = data,
parameters.to.save = params,
inits = initsFunction,
model.file = modfile,
modules=c('glm','dic'),
n.chains = 2,
n.adapt = 100,
n.iter = 30000,
n.burnin = 10000,
n.thin = 2,
parallel=TRUE,
seed=as.integer(Sys.time()),
n.cores=2)
sink()
end <- Sys.time()
elapsed_time <- end - start
