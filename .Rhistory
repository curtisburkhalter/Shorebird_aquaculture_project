dim(comdata)
nrow(comdata)
dim(OnlyTending)
fit_set <- OnlyTending
fit_set$Bulk <- ifelse(fit_set$NSH == 2,1,0)
fit_set$Dune <- ifelse(fit_set$NSH == 4,1,0)
fit_set$Phrag <- ifelse(fit_set$NSH == 6,1,0)
fit_set$Marsh <- ifelse(fit_set$NSH == 5,1,0)
fit_set$Creek <- ifelse(fit_set$NSH == 3,1,0)
fit_set$Woodland <- ifelse(fit_set$NSH == 7,1,0)
fit_set$FT <- ifelse(fit_set$Ntide == 1, 1,0)
fit_set$LT <- ifelse(fit_set$Ntide == 2, 1,0)
fit_set$RT <- ifelse(fit_set$Ntide == 3, 1,0)
#create species specific datasets from fit_set
REKN <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
RUTU <- fit_set[, -grep("REKN.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
SESA <- fit_set[, -grep("RUTU.*|REKN.*|SAND.*|DUNL.*", colnames(fit_set))]
SAND <- fit_set[, -grep("RUTU.*|SESA.*|REKN.*|DUNL.*", colnames(fit_set))]
DUNL <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|REKN.*", colnames(fit_set))]
str(fit_set)
unique(fit_set$TS)
str(fit_set)
fit_set$time <- as.numeric(fit_set$time)
fit_set$TS <- as.integer(fit_set$TS)
fit_set$nOM <- as.integer(fit_set$nOM)
fit_set$raptor <- as.integer(fit_set$raptor)
fit_set$plane <- as.integer(fit_set$plane)
names(fit_set$`#Gulls`) <- "nGulls"
fit_set$`#Gulls` <- fit_set$nGulls
#Shorebird-Aquaculture Model written for BUGS modeling language
#code written by Curtis Burkhalter
#call in required libraries
suppressMessages(library('janitor'))  #package required to clean up column names automatically
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#standardize all data by dividing by 2sd
suppressMessages(library('tidyverse'))
#set working directory
setwd("~/GitHub/Shorebird_aquaculture_project")
pathtofiles <- "G:/Shorebird Project/ShorebirdModel2017/"
#read in raw census data file
RawCensus <- read.delim(file=paste(pathtofiles,"Census201617_Updated.txt",sep=""),header=TRUE, stringsAsFactors = FALSE) %>% clean_names()
View(RawCensus)
#need to attach species names to column headings for each set of observations
#REKN columns 14-20
#RUTU columsn 21-27
#SESA columns 28-34
#SAND columns 35-41
#DUNL columns 42-48
RawCensus[1,14:20] <- paste("REKN",RawCensus[1,14:20],sep=" ")
RawCensus[1,21:27] <- paste("RUTU",RawCensus[1,21:27],sep=" ")
RawCensus[1,28:34] <- paste("SESA",RawCensus[1,28:34],sep=" ")
RawCensus[1,35:41] <- paste("SAND",RawCensus[1,35:41],sep=" ")
RawCensus[1,42:48] <- paste("DUNL",RawCensus[1,42:48],sep=" ")
#replace header column with column entries from row 1; these
#should have been the column headers in the file
colnames(RawCensus) <- RawCensus[1,]
#Remove all column entries for row 1
RawCensus <- RawCensus[-1,]
#remove columns corresponding to observations of less frequent species
#columns 50-69; also remove notes columns 77-79
RawCensus <- RawCensus[,-(c(50:69,77:79))]
#change column names to format that I like
names(RawCensus) <- gsub("Shoreline.*","shore_hab",names(RawCensus))
names(RawCensus) <- gsub("Date.*","date",names(RawCensus))
names(RawCensus) <- gsub("Time.*","time",names(RawCensus))
names(RawCensus) <- gsub("Tide.*","tide",names(RawCensus))
names(RawCensus) <- gsub("Wind Direction.*","windD",names(RawCensus))
names(RawCensus) <- gsub("Wind Speed.*","windS",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Location","FEL",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to RACKS","FEDR",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to TENDING","FEDT",names(RawCensus))
names(RawCensus) <- gsub(".*Window","TW",names(RawCensus))
names(RawCensus) <- gsub("Total # Shorebirds.*","TS",names(RawCensus))
names(RawCensus) <- gsub("Air Temp.*","AT",names(RawCensus))
names(RawCensus) <- gsub("Total # in segment","TIS",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Location","FCL",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to RACKS","FCDR",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to TENDING","FCDT",names(RawCensus))
names(RawCensus) <- gsub("Tending?.*","tending",names(RawCensus))
names(RawCensus) <- gsub("#oystermen.*","nOM",names(RawCensus))
names(RawCensus) <- gsub("#non-oyster.*","nOtherP",names(RawCensus))
names(RawCensus) <- gsub("#dog.*","dog",names(RawCensus))
names(RawCensus) <- gsub("# rapt.*","raptor",names(RawCensus))
names(RawCensus) <- gsub("#low-fly.*","plane",names(RawCensus))
names(RawCensus) <- gsub("#Activ.*","activities",names(RawCensus))
names(RawCensus) <- gsub("Segment #.*","segment",names(RawCensus))
names(RawCensus) <- gsub("#Gulls.*","nGulls",names(RawCensus))
#call in required libraries
suppressMessages(library('janitor'))  #package required to clean up column names automatically
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#standardize all data by dividing by 2sd
suppressMessages(library('tidyverse'))
#set working directory
setwd("~/GitHub/Shorebird_aquaculture_project")
pathtofiles <- "G:/Shorebird Project/ShorebirdModel2017/"
#read in raw census data file
RawCensus <- read.delim(file=paste(pathtofiles,"Census201617_Updated.txt",sep=""),header=TRUE, stringsAsFactors = FALSE) %>% clean_names()
View(RawCensus)
#need to attach species names to column headings for each set of observations
#REKN columns 14-20
#RUTU columsn 21-27
#SESA columns 28-34
#SAND columns 35-41
#DUNL columns 42-48
RawCensus[1,14:20] <- paste("REKN",RawCensus[1,14:20],sep=" ")
RawCensus[1,21:27] <- paste("RUTU",RawCensus[1,21:27],sep=" ")
RawCensus[1,28:34] <- paste("SESA",RawCensus[1,28:34],sep=" ")
RawCensus[1,35:41] <- paste("SAND",RawCensus[1,35:41],sep=" ")
RawCensus[1,42:48] <- paste("DUNL",RawCensus[1,42:48],sep=" ")
#replace header column with column entries from row 1; these
#should have been the column headers in the file
colnames(RawCensus) <- RawCensus[1,]
#Remove all column entries for row 1
RawCensus <- RawCensus[-1,]
#remove columns corresponding to observations of less frequent species
#columns 50-69; also remove notes columns 77-79
RawCensus <- RawCensus[,-(c(50:69,77:79))]
#change column names to format that I like
names(RawCensus) <- gsub("Shoreline.*","shore_hab",names(RawCensus))
names(RawCensus) <- gsub("Date.*","date",names(RawCensus))
names(RawCensus) <- gsub("Time.*","time",names(RawCensus))
names(RawCensus) <- gsub("Tide.*","tide",names(RawCensus))
names(RawCensus) <- gsub("Wind Direction.*","windD",names(RawCensus))
names(RawCensus) <- gsub("Wind Speed.*","windS",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Location","FEL",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to RACKS","FEDR",names(RawCensus))
names(RawCensus) <- gsub("Flock EDGE Distance to TENDING","FEDT",names(RawCensus))
names(RawCensus) <- gsub(".*Window","TW",names(RawCensus))
names(RawCensus) <- gsub("Total # Shorebirds.*","TS",names(RawCensus))
names(RawCensus) <- gsub("Air Temp.*","AT",names(RawCensus))
names(RawCensus) <- gsub("Total # in segment","TIS",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Location","FCL",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to RACKS","FCDR",names(RawCensus))
names(RawCensus) <- gsub("Flock CENTER Distance to TENDING","FCDT",names(RawCensus))
names(RawCensus) <- gsub("Tending?.*","tending",names(RawCensus))
names(RawCensus) <- gsub("#oystermen.*","nOM",names(RawCensus))
names(RawCensus) <- gsub("#non-oyster.*","nOtherP",names(RawCensus))
names(RawCensus) <- gsub("#dog.*","dog",names(RawCensus))
names(RawCensus) <- gsub("# rapt.*","raptor",names(RawCensus))
names(RawCensus) <- gsub("#low-fly.*","plane",names(RawCensus))
names(RawCensus) <- gsub("#Activ.*","activities",names(RawCensus))
names(RawCensus) <- gsub("Segment #.*","segment",names(RawCensus))
names(RawCensus) <- gsub("#Gulls.*","nGulls",names(RawCensus))
#remove records that contain only a blank space or other character entries
#for total shorebirds|REKN TIS|RUTU TIS|SESA TIS|SAND TIS|DUNL TIS
#there is no other useful data in these records, also any place where there is
#the character entry "N/A" or "2=4"
RawCensus <- RawCensus[!(RawCensus$TS == ""|RawCensus$TS == "N/A"|RawCensus$TS == "2=4"),]
RawCensus <- RawCensus[!(RawCensus$`SESA TIS` == "20/10"|RawCensus$`SESA TIS` == " 4/4"|RawCensus$`SESA TIS` == ""),]
RawCensus <- RawCensus[!(RawCensus$`RUTU TIS` == ""|RawCensus$`RUTU TIS` == "~"),]
#need to convert all of the bird counts to numeric values
RawCensus$TS <- as.numeric(RawCensus$TS)
RawCensus$`REKN TIS` <- as.numeric(RawCensus$`REKN TIS`)
RawCensus$`SESA TIS` <- as.numeric(RawCensus$`SESA TIS`)
RawCensus$`RUTU TIS` <- as.numeric(RawCensus$`RUTU TIS`)
RawCensus$`SAND TIS` <- as.numeric(RawCensus$`SAND TIS`)
RawCensus$`DUNL TIS` <- as.numeric(RawCensus$`DUNL TIS`)
#for some reason some of the REKN,DUNL and RUTU counts include negative numbers
RawCensus <- RawCensus[!(RawCensus$`REKN TIS` < 0|RawCensus$`RUTU TIS` < 0|RawCensus$`DUNL TIS` < 0), ]
#in one entry of 'raptor' column the species was identified
#this drops the species id
RawCensus$raptor <- gsub("\\ BAEA","",RawCensus$raptor)
#in the plane column there are entries with letters
#remove all letters
RawCensus$plane <- gsub("1.*","1",RawCensus$plane)
#convert certain character vectors to factors
RawCensus$segment <- as.factor(RawCensus$segment)
RawCensus$shore_hab <- as.factor(RawCensus$shore_hab)
RawCensus$tide <- as.factor(RawCensus$tide)
RawCensus$date <- as.factor(RawCensus$date)
RawCensus$windD <- as.factor(RawCensus$windD)
#change time so that only numeric
RawCensus$time <- sub(":","",RawCensus$time)
#drop all flock center location columns
RawCensus <- RawCensus[, -grep("FCL.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDR.*", colnames(RawCensus))]
RawCensus <- RawCensus[, -grep("FCDT.*", colnames(RawCensus))]
#subset records to only include those during the tending window
#tending window times correspond to "TW" = 1
OnlyTending<- RawCensus[!(RawCensus$TW==0|is.na(RawCensus$TW)),]
#remove tending window column now that data is subset
OnlyTending$TW <- NULL
#create new date format for date and remove old one
OnlyTending$date <- as.POSIXct(OnlyTending$date, format = "%m/%d/%Y")
#convert the date to a numeric day from 1-365
OnlyTending$day <- strptime(OnlyTending$date, format = "%Y-%m-%d",tz = "")$yday+1
#create year column
OnlyTending$year <- substr(OnlyTending$date, 1,4)
OnlyTending$date <- NULL
#write function that converts data structures from factors to a numeric sequence
as.numeric.factor <- function(x) {seq_along(levels(x))[x]}
#convert segment ids to simple integer value ids
OnlyTending$Nsegment <- as.numeric.factor(OnlyTending$segment)
##convert shore_hab into a numeric id
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
OnlyTending$NSH <- as.numeric.factor(OnlyTending$shore_hab)
#remove all white space from tide column and convert to numeric
#Falling=1;Low=2,Rising=3
OnlyTending$tide <- as.factor(gsub("\\s", "", OnlyTending$tide))
OnlyTending$Ntide <- as.numeric.factor(OnlyTending$tide)
#drop unused levels from factors
OnlyTending$windD<-droplevels(OnlyTending$windD)
##convert wind direction into a numeric id
OnlyTending$NWD <- as.numeric.factor(OnlyTending$windD)
#drop non-numeric categorical variable columns
OnlyTending$segment <- OnlyTending$shore_hab <- OnlyTending$tide <- OnlyTending$date <- OnlyTending$windD <- OnlyTending$SegmentInt <- NULL
OnlyTending$`Julian Day` <- NULL
OnlyTending$`Census #` <- NULL
# #BLOCK COMMENT THIS SECTION OUT; IT NO LONGER MAKES SENSE TO DO IT
# #THIS WAY; FINAL DATASET IS COMBINED ACROSS YEARS
# #create 2 datasets that we will be used to fit the models and
# #test predictions of the models
#
# #to make the fit sets comparable in terms of the number
# #of records that actually have tending occurring we look
# #at the number of times that tending equals "1"
#
# tending_events <- length(OnlyTending$tending[OnlyTending$tending == 1])
# tending_events
#
# #tending events make up roughly 10% of all records
# #so when I create the prediction set records with tending need
# #to make up about 10% of all samples; I'm going to subset
# #1000 of the records in 'OnlyTending' so 100 should contain
# #records with tending in them
#
# TendingRecs <- OnlyTending[OnlyTending$tending == 1,]
# sampOT_tendRecs <- TendingRecs[sample(nrow(TendingRecs),100,replace = F),]
#
# NonTendingRecs <- OnlyTending[OnlyTending$tending == 0,]
# sampOT_NonTendRecs <- NonTendingRecs[sample(nrow(NonTendingRecs),900,replace = F),]
#
# predict_set <- rbind(sampOT_tendRecs,sampOT_NonTendRecs)
# fit_set <- OnlyTending[!rownames(OnlyTending) %in% rownames(predict_set),]
#
# #there are a different number of records between 2016 and 2017
# #so I will randomly subsampling the fitset records from 2017 so that
# #the number of records from 2016 and 2017 is the same
# fit_set16<- fit_set[fit_set$year==2016,]
# fit_set17 <- fit_set[fit_set$year==2017,]
# sampFS17 <- fit_set17[sample(nrow(fit_set17),nrow(fit_set16),replace = F),]
#
# #build final fit_set by combining the records from fit_set16
# #and sampFS17
#
# fit_set<- rbind(fit_set16,sampFS17)
# fit_set16<-NULL
# fit_set17<-NULL
fit_set <- OnlyTending
#need to code the categorical variables as dummy variables
#to ease their coding in WinBUGS; This requires
#code each level of the categorical variable as 0/1;
#for this dataset it is NSH, Ntide
#Bulkhead=2;Dune=4,Phragmites=6;Marsh=5;Creek=3;Woodland=7
#Falling=1;Low=2,Rising=3
fit_set$Bulk <- ifelse(fit_set$NSH == 2,1,0)
fit_set$Dune <- ifelse(fit_set$NSH == 4,1,0)
fit_set$Phrag <- ifelse(fit_set$NSH == 6,1,0)
fit_set$Marsh <- ifelse(fit_set$NSH == 5,1,0)
fit_set$Creek <- ifelse(fit_set$NSH == 3,1,0)
fit_set$Woodland <- ifelse(fit_set$NSH == 7,1,0)
fit_set$FT <- ifelse(fit_set$Ntide == 1, 1,0)
fit_set$LT <- ifelse(fit_set$Ntide == 2, 1,0)
fit_set$RT <- ifelse(fit_set$Ntide == 3, 1,0)
# #create year specific datasets from species specific datasets
# REKN16 <- REKN[REKN$year == "2016",]
# REKN17 <- REKN[REKN$year == "2017",]
#
# RUTU16 <- RUTU[RUTU$year == "2016",]
# RUTU17 <- RUTU[RUTU$year == "2017",]
#
# SESA16 <- SESA[SESA$year == "2016",]
# SESA17 <- SESA[SESA$year == "2017",]
#
# SAND16 <- SAND[SAND$year == "2016",]
# SAND17 <- SAND[SAND$year == "2017",]
#
# DUNL16 <- DUNL[DUNL$year == "2016",]
# DUNL17 <- DUNL[DUNL$year == "2017",]
#
# #set up 2 combined spp data structures to be a 2-D arrays of the following
# #form y[i,j], where i = observation; j = species; y16 holds
# #the 2016 data and y17 holds the 2017 data; need two separate arrays
# #because their is more data in 2017 than 2016 which leads to
# #unbalanced array
#
# y16 <- cbind(REKN16[,grep("TIS.*",colnames(REKN16))],
#           RUTU16[,grep("TIS.*",colnames(RUTU16))],
#           SESA16[,grep("TIS.*",colnames(SESA16))],
#           SAND16[,grep("TIS.*",colnames(SAND16))],
#           DUNL16[,grep("TIS.*",colnames(DUNL16))])
#
#
# y17 <-  cbind(REKN17[,grep("TIS.*",colnames(REKN17))],
#               RUTU17[,grep("TIS.*",colnames(RUTU17))],
#               SESA17[,grep("TIS.*",colnames(SESA17))],
#               SAND17[,grep("TIS.*",colnames(SAND17))],
#               DUNL17[,grep("TIS.*",colnames(DUNL17))])
#
# colnames(y16) <- c("y[,1,1]",
#               "y[,2,1]",
#               "y[,3,1]",
#               "y[,4,1]",
#               "y[,5,1]")
#
#
# colnames(y17) <- c("y[,1,2]",
#                    "y[,2,2]",
#                    "y[,3,2]",
#                    "y[,4,2]",
#                    "y[,5,2]")
#
#
# yComb <- cbind(y16,y17)
#need to standardize the data before using it in modeling
#but before make sure all the covariate data is numeric
#and not character; see Gelman 2008 for reasoning
#behind scaling regression coefficients for numeric variables
#that are not binary
str(fit_set)
fit_set$time <- as.numeric(fit_set$time)
fit_set$TS <- as.integer(fit_set$TS)
fit_set$nOM <- as.integer(fit_set$nOM)
fit_set$raptor <- as.integer(fit_set$raptor)
fit_set$plane <- as.integer(fit_set$plane)
str(fit_set)
fit_set$nGulls <- as.integer(fit_set$nGulls)
str(fit_set)
fit_set$activities <- as.integer(fit_set$activities)
str(fit_set)
fit_set$time <- as.numeric(fit_set$time)
fit_set$TS <- as.integer(fit_set$TS)
fit_set$nOM <- as.integer(fit_set$nOM)
fit_set$raptor <- as.integer(fit_set$raptor)
fit_set$plane <- as.integer(fit_set$plane)
fit_set$activities <- as.integer(fit_set$activities)
fit_set$nGulls <- as.integer(fit_set$nGulls)
fit_set$year <- as.integer(fit_set$year)
fit_set$nOtherP <- as.integer(fit_set$nOtherP)
fit_set$dog <- as.integer(fit_set$dog)
fit_set$tending <- as.integer(fit_set$tending)
fit_set$windS <- as.numeric(fit_set$windS)
fit_set$AT <- as.numeric(fit_set$AT)
str(fit_set)
unique(fit_set$`REKN FEL`)
unique(fit_set$`REKN FEDR`)
str(fit_set)
#drop all FEL columns from fit_set
fit_set <- fit_set[, -grep("FEL.*", colnames(fit_set))]
str(fit_set)
fit_set <- fit_set[, -grep("FEDT.*", colnames(fit_set))]
str(fit_set)
unique(fit_set$`REKN FEDR`)
unique(fit_set$`RUTU FEDR`)
unique(fit_set$`SESA FEDR`)
unique(fit_set$`SAND FEDR`)
unique(fit_set$`DUNL FEDR`)
length(fit_set$`REKN FEDR`[fit_set$`REKN FEDR` == "~"|fit_set$`REKN FEDR`=="+"])
View(fit_set[,5:6])
View(fit_set[fit_set$`REKN FEDR` == "~",5:6])
unique(fit_set[fit_set$`REKN TIS` == 0,6])
View(fit_set[fit_set$`REKN TIS` == "+",5:6])
View(fit_set[fit_set$`REKN FEDR` == "+",5:6])
View(fit_set[fit_set$`REKN FEDR` == "~",5:6])
dim(fit_set)
#create species specific datasets from fit_set
REKN <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
RUTU <- fit_set[, -grep("REKN.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
SESA <- fit_set[, -grep("RUTU.*|REKN.*|SAND.*|DUNL.*", colnames(fit_set))]
SAND <- fit_set[, -grep("RUTU.*|SESA.*|REKN.*|DUNL.*", colnames(fit_set))]
DUNL <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|REKN.*", colnames(fit_set))]
View(REKN)
#use dummy variable coding for each species to create a series of distance
#classes; "~" = DC1; "+" = DC2; "0" = DC3, "1" = DC4;
#"2" = DC5; "3" = DC6; "4" = DC7, "5" = DC8;
REKN$`REKN FEDR` <- ifelse(REKN$`REKN FEDR`=="O","0","1")
unique(REKN$`REKN FEDR`)
#create species specific datasets from fit_set
REKN <- fit_set[, -grep("RUTU.*|SESA.*|SAND.*|DUNL.*", colnames(fit_set))]
#use dummy variable coding for each species to create a series of distance
#classes; "~" = DC1; "+" = DC2; "0" = DC3, "1" = DC4;
#"2" = DC5; "3" = DC6; "4" = DC7, "5" = DC8;
REKN$`REKN FEDR` <- ifelse(REKN$`REKN FEDR`=="O","0",REKN$`REKN FEDR`)
unique(REKN$`REKN FEDR`)
RUTU$DC1 <- ifelse(RUTU$`RUTU FEDR` == "~",1,0)
RUTU$DC2 <- ifelse(RUTU$`RUTU FEDR` == "+",1,0)
RUTU$DC3 <- ifelse(RUTU$`RUTU FEDR` == "0",1,0)
RUTU$DC4 <- ifelse(RUTU$`RUTU FEDR` == "1",1,0)
RUTU$DC5 <- ifelse(RUTU$`RUTU FEDR` == "2",1,0)
RUTU$DC6 <- ifelse(RUTU$`RUTU FEDR` == "3",1,0)
RUTU$DC7 <- ifelse(RUTU$`RUTU FEDR` == "4",1,0)
RUTU$DC8 <- ifelse(RUTU$`RUTU FEDR` == "5",1,0)
SESA$DC1 <- ifelse(SESA$`SESA FEDR` == "~",1,0)
SESA$DC2 <- ifelse(SESA$`SESA FEDR` == "+",1,0)
SESA$DC3 <- ifelse(SESA$`SESA FEDR` == "0",1,0)
SESA$DC4 <- ifelse(SESA$`SESA FEDR` == "1",1,0)
SESA$DC5 <- ifelse(SESA$`SESA FEDR` == "2",1,0)
SESA$DC6 <- ifelse(SESA$`SESA FEDR` == "3",1,0)
SESA$DC7 <- ifelse(SESA$`SESA FEDR` == "4",1,0)
SESA$DC8 <- ifelse(SESA$`SESA FEDR` == "5",1,0)
SAND$DC1 <- ifelse(SAND$`SAND FEDR` == "~",1,0)
SAND$DC2 <- ifelse(SAND$`SAND FEDR` == "+",1,0)
SAND$DC3 <- ifelse(SAND$`SAND FEDR` == "0",1,0)
SAND$DC4 <- ifelse(SAND$`SAND FEDR` == "1",1,0)
SAND$DC5 <- ifelse(SAND$`SAND FEDR` == "2",1,0)
SAND$DC6 <- ifelse(SAND$`SAND FEDR` == "3",1,0)
SAND$DC7 <- ifelse(SAND$`SAND FEDR` == "4",1,0)
SAND$DC8 <- ifelse(SAND$`SAND FEDR` == "5",1,0)
DUNL$DC1 <- ifelse(DUNL$`DUNL FEDR` == "~",1,0)
DUNL$DC2 <- ifelse(DUNL$`DUNL FEDR` == "+",1,0)
DUNL$DC3 <- ifelse(DUNL$`DUNL FEDR` == "0",1,0)
DUNL$DC4 <- ifelse(DUNL$`DUNL FEDR` == "1",1,0)
DUNL$DC5 <- ifelse(DUNL$`DUNL FEDR` == "2",1,0)
DUNL$DC6 <- ifelse(DUNL$`DUNL FEDR` == "3",1,0)
DUNL$DC7 <- ifelse(DUNL$`DUNL FEDR` == "4",1,0)
DUNL$DC8 <- ifelse(DUNL$`DUNL FEDR` == "5",1,0)
REKN$DC1 <- ifelse(REKN$`REKN FEDR` == "~",1,0)
REKN$DC2 <- ifelse(REKN$`REKN FEDR` == "+",1,0)
REKN$DC3 <- ifelse(REKN$`REKN FEDR` == "0",1,0)
REKN$DC4 <- ifelse(REKN$`REKN FEDR` == "1",1,0)
REKN$DC5 <- ifelse(REKN$`REKN FEDR` == "2",1,0)
REKN$DC6 <- ifelse(REKN$`REKN FEDR` == "3",1,0)
REKN$DC7 <- ifelse(REKN$`REKN FEDR` == "4",1,0)
REKN$DC8 <- ifelse(REKN$`REKN FEDR` == "5",1,0)
View(REKN)
unique(REKN$`REKN FEDR`)
fit_set[1,1:10]
REKN[1,]
dim(REKN)
REKN[1:3,15]
REKN[1:3,21]
REKN[1:3,20]
#subset the relevant covariates for each species
REKN_set_covar <- REKN[,c(1:4,7:15L,21:37)]
head(REKN_set_covar)
#subset the relevant covariates for each species
REKN_set_covar <- REKN[,c(1:4,7:15,21:37)]
#subset the relevant covariates for each species
REKN_set_covar <- REKN[,c(1:4,7:37)]
head(REKN_set_covar)
dim(REKN_set_covar)
#subset the relevant covariates for each species
REKN_set_covar <- REKN[,c(1:4,7:15,21:37)]
dim(REKN_set_covar)
head(REKN_set_covar)
fit_set[1,]
REKN[1,]
#subset the relevant covariates for each species
REKN_set_covar <- REKN[,c(1:4,7:17,20:37)]
head(REKN_set_covar)
dim(REKN_set_covar)
#the rescaling leaves the binary variables, including dummies,
#as 0/1 and divides the continuous variables by 2sd, exclude random effect variables
REKN_covarSTD <- apply(REKN_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#the rescaling leaves the binary variables, including dummies,
#as 0/1 and divides the continuous variables by 2sd, exclude random effect variables
REKN_covarSTD <- apply(REKN_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
install.packages("lme4")
suppressMessages(library('arm')) #package written by A. Gelman that will automatically
#the rescaling leaves the binary variables, including dummies,
#as 0/1 and divides the continuous variables by 2sd, exclude random effect variables
REKN_covarSTD <- apply(REKN_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
RUTU_covarSTD <- apply(RUTU_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
SESA_covarSTD <- apply(SESA_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
SAND_covarSTD <- apply(SAND_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
DUNL_covarSTD <- apply(DUNL_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
RUTU_set_covar <- RUTU[,c(1:4,7:17,20:37)]
SESA_set_covar <- SESA[,c(1:4,7:17,20:37)]
SAND_set_covar <- SAND[,c(1:4,7:17,20:37)]
DUNL_set_covar <- DUNL[,c(1:4,7:17,20:37)]
RUTU_covarSTD <- apply(RUTU_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
SESA_covarSTD <- apply(SESA_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
SAND_covarSTD <- apply(SAND_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
DUNL_covarSTD <- apply(DUNL_set_covar[,c(1:13,17:33)],2,rescale, binary.inputs = "0/1")
REKN_covarSTD <- cbind(REKN_set_covar[,14:16],REKN_covarSTD)
head(REKN_covarSTD)
colnames(REKN_covarSTD)[1:3] <- c("year","Nsegment","NWD")
RUTU_covarSTD <- cbind(RUTU_set_covar[,14:16],RUTU_covarSTD)
colnames(RUTU_covarSTD)[1:3] <- c("year","Nsegment","NWD")
SESA_covarSTD <- cbind(SESA_set_covar[,14:16],SESA_covarSTD)
colnames(SESA_covarSTD)[1:3] <- c("year","Nsegment","NWD")
SAND_covarSTD <- cbind(SAND_set_covar[,14:16],SAND_covarSTD)
colnames(SAND_covarSTD)[1:3] <- c("year","Nsegment","NWD")
DUNL_covarSTD <- cbind(DUNL_set_covar[,14:16],DUNL_covarSTD)
colnames(DUNL_covarSTD)[1:3] <- c("year","Nsegment","NWD")
head(REKN_set_covar)
View(REKN_set_covar$Woodland)
range(REKN_set_covar$Woodland
)
install.packages('engsoccerdata')
#load required libraries
library(engsoccerdata)
#load required libraries
SuppressMessages(library(engsoccerdata))
#load required libraries
uppressMessages(library(engsoccerdata))
#load required libraries
suppressMessages(library(engsoccerdata))
help("england")
head(england)
str(england)
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
install.packages('plyr')
suppressMessages(library(engsoccerdata))
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
install.packages('here')
help(here)
suppressMessages(library(here))
here()
